// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Advance extends ethereum.Event {
  get params(): Advance__Params {
    return new Advance__Params(this);
  }
}

export class Advance__Params {
  _event: Advance;

  constructor(event: Advance) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get block(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Bond extends ethereum.Event {
  get params(): Bond__Params {
    return new Bond__Params(this);
  }
}

export class Bond__Params {
  _event: Bond;

  constructor(event: Bond) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get start(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get valueUnderlying(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Commit extends ethereum.Event {
  get params(): Commit__Params {
    return new Commit__Params(this);
  }
}

export class Commit__Params {
  _event: Commit;

  constructor(event: Commit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get candidate(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CouponApproval extends ethereum.Event {
  get params(): CouponApproval__Params {
    return new CouponApproval__Params(this);
  }
}

export class CouponApproval__Params {
  _event: CouponApproval;

  constructor(event: CouponApproval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CouponExpiration extends ethereum.Event {
  get params(): CouponExpiration__Params {
    return new CouponExpiration__Params(this);
  }
}

export class CouponExpiration__Params {
  _event: CouponExpiration;

  constructor(event: CouponExpiration) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get couponsExpired(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lessRedeemable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lessDebt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newBonded(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CouponPurchase extends ethereum.Event {
  get params(): CouponPurchase__Params {
    return new CouponPurchase__Params(this);
  }
}

export class CouponPurchase__Params {
  _event: CouponPurchase;

  constructor(event: CouponPurchase) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get dollarAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get couponAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CouponRedemption extends ethereum.Event {
  get params(): CouponRedemption__Params {
    return new CouponRedemption__Params(this);
  }
}

export class CouponRedemption__Params {
  _event: CouponRedemption;

  constructor(event: CouponRedemption) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get couponAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CouponTransfer extends ethereum.Event {
  get params(): CouponTransfer__Params {
    return new CouponTransfer__Params(this);
  }
}

export class CouponTransfer__Params {
  _event: CouponTransfer;

  constructor(event: CouponTransfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Incentivization extends ethereum.Event {
  get params(): Incentivization__Params {
    return new Incentivization__Params(this);
  }
}

export class Incentivization__Params {
  _event: Incentivization;

  constructor(event: Incentivization) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Proposal extends ethereum.Event {
  get params(): Proposal__Params {
    return new Proposal__Params(this);
  }
}

export class Proposal__Params {
  _event: Proposal;

  constructor(event: Proposal) {
    this._event = event;
  }

  get candidate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get start(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get period(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SupplyDecrease extends ethereum.Event {
  get params(): SupplyDecrease__Params {
    return new SupplyDecrease__Params(this);
  }
}

export class SupplyDecrease__Params {
  _event: SupplyDecrease;

  constructor(event: SupplyDecrease) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SupplyIncrease extends ethereum.Event {
  get params(): SupplyIncrease__Params {
    return new SupplyIncrease__Params(this);
  }
}

export class SupplyIncrease__Params {
  _event: SupplyIncrease;

  constructor(event: SupplyIncrease) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newRedeemable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lessDebt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newBonded(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SupplyNeutral extends ethereum.Event {
  get params(): SupplyNeutral__Params {
    return new SupplyNeutral__Params(this);
  }
}

export class SupplyNeutral__Params {
  _event: SupplyNeutral;

  constructor(event: SupplyNeutral) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unbond extends ethereum.Event {
  get params(): Unbond__Params {
    return new Unbond__Params(this);
  }
}

export class Unbond__Params {
  _event: Unbond;

  constructor(event: Unbond) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get start(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get valueUnderlying(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Vote extends ethereum.Event {
  get params(): Vote__Params {
    return new Vote__Params(this);
  }
}

export class Vote__Params {
  _event: Vote;

  constructor(event: Vote) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get candidate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vote(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get bonded(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowanceCoupons(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowanceCoupons",
      "allowanceCoupons(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowanceCoupons(
    owner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowanceCoupons",
      "allowanceCoupons(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveFor(candidate: Address): BigInt {
    let result = super.call("approveFor", "approveFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBigInt();
  }

  try_approveFor(candidate: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("approveFor", "approveFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBonded(account: Address): BigInt {
    let result = super.call(
      "balanceOfBonded",
      "balanceOfBonded(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfBonded(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfBonded",
      "balanceOfBonded(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfCoupons(account: Address, epoch: BigInt): BigInt {
    let result = super.call(
      "balanceOfCoupons",
      "balanceOfCoupons(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(epoch)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfCoupons(
    account: Address,
    epoch: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfCoupons",
      "balanceOfCoupons(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(epoch)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfStaged(account: Address): BigInt {
    let result = super.call(
      "balanceOfStaged",
      "balanceOfStaged(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfStaged(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfStaged",
      "balanceOfStaged(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bootstrappingAt(epoch: BigInt): boolean {
    let result = super.call(
      "bootstrappingAt",
      "bootstrappingAt(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBoolean();
  }

  try_bootstrappingAt(epoch: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "bootstrappingAt",
      "bootstrappingAt(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  couponPremium(amount: BigInt): BigInt {
    let result = super.call(
      "couponPremium",
      "couponPremium(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_couponPremium(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "couponPremium",
      "couponPremium(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  couponsExpiration(epoch: BigInt): BigInt {
    let result = super.call(
      "couponsExpiration",
      "couponsExpiration(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_couponsExpiration(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "couponsExpiration",
      "couponsExpiration(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dollar(): Address {
    let result = super.call("dollar", "dollar():(address)", []);

    return result[0].toAddress();
  }

  try_dollar(): ethereum.CallResult<Address> {
    let result = super.tryCall("dollar", "dollar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  epochTime(): BigInt {
    let result = super.call("epochTime", "epochTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epochTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epochTime", "epochTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expiringCoupons(epoch: BigInt): BigInt {
    let result = super.call(
      "expiringCoupons",
      "expiringCoupons(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_expiringCoupons(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expiringCoupons",
      "expiringCoupons(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  expiringCouponsAtIndex(epoch: BigInt, i: BigInt): BigInt {
    let result = super.call(
      "expiringCouponsAtIndex",
      "expiringCouponsAtIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toBigInt();
  }

  try_expiringCouponsAtIndex(
    epoch: BigInt,
    i: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expiringCouponsAtIndex",
      "expiringCouponsAtIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(epoch),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fluidUntil(account: Address): BigInt {
    let result = super.call("fluidUntil", "fluidUntil(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_fluidUntil(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fluidUntil", "fluidUntil(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInitialized(candidate: Address): boolean {
    let result = super.call("isInitialized", "isInitialized(address):(bool)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBoolean();
  }

  try_isInitialized(candidate: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInitialized",
      "isInitialized(address):(bool)",
      [ethereum.Value.fromAddress(candidate)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNominated(candidate: Address): boolean {
    let result = super.call("isNominated", "isNominated(address):(bool)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBoolean();
  }

  try_isNominated(candidate: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isNominated", "isNominated(address):(bool)", [
      ethereum.Value.fromAddress(candidate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedUntil(account: Address): BigInt {
    let result = super.call("lockedUntil", "lockedUntil(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_lockedUntil(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lockedUntil",
      "lockedUntil(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  outstandingCoupons(epoch: BigInt): BigInt {
    let result = super.call(
      "outstandingCoupons",
      "outstandingCoupons(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_outstandingCoupons(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "outstandingCoupons",
      "outstandingCoupons(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodFor(candidate: Address): BigInt {
    let result = super.call("periodFor", "periodFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBigInt();
  }

  try_periodFor(candidate: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("periodFor", "periodFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  purchaseCoupons(dollarAmount: BigInt): BigInt {
    let result = super.call(
      "purchaseCoupons",
      "purchaseCoupons(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(dollarAmount)]
    );

    return result[0].toBigInt();
  }

  try_purchaseCoupons(dollarAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "purchaseCoupons",
      "purchaseCoupons(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(dollarAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recordedVote(account: Address, candidate: Address): i32 {
    let result = super.call(
      "recordedVote",
      "recordedVote(address,address):(uint8)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(candidate)
      ]
    );

    return result[0].toI32();
  }

  try_recordedVote(
    account: Address,
    candidate: Address
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "recordedVote",
      "recordedVote(address,address):(uint8)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(candidate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  rejectFor(candidate: Address): BigInt {
    let result = super.call("rejectFor", "rejectFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBigInt();
  }

  try_rejectFor(candidate: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rejectFor", "rejectFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startFor(candidate: Address): BigInt {
    let result = super.call("startFor", "startFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBigInt();
  }

  try_startFor(candidate: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startFor", "startFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  statusOf(account: Address): i32 {
    let result = super.call("statusOf", "statusOf(address):(uint8)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toI32();
  }

  try_statusOf(account: Address): ethereum.CallResult<i32> {
    let result = super.tryCall("statusOf", "statusOf(address):(uint8)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalBonded(): BigInt {
    let result = super.call("totalBonded", "totalBonded():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalBonded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalBonded", "totalBonded():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalBondedAt(epoch: BigInt): BigInt {
    let result = super.call(
      "totalBondedAt",
      "totalBondedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_totalBondedAt(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalBondedAt",
      "totalBondedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCoupons(): BigInt {
    let result = super.call("totalCoupons", "totalCoupons():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalCoupons(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalCoupons", "totalCoupons():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalNet(): BigInt {
    let result = super.call("totalNet", "totalNet():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalNet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalNet", "totalNet():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRedeemable(): BigInt {
    let result = super.call(
      "totalRedeemable",
      "totalRedeemable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRedeemable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRedeemable",
      "totalRedeemable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaged(): BigInt {
    let result = super.call("totalStaged", "totalStaged():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaged(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaged", "totalStaged():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  votesFor(candidate: Address): BigInt {
    let result = super.call("votesFor", "votesFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);

    return result[0].toBigInt();
  }

  try_votesFor(candidate: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votesFor", "votesFor(address):(uint256)", [
      ethereum.Value.fromAddress(candidate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AdvanceCall extends ethereum.Call {
  get inputs(): AdvanceCall__Inputs {
    return new AdvanceCall__Inputs(this);
  }

  get outputs(): AdvanceCall__Outputs {
    return new AdvanceCall__Outputs(this);
  }
}

export class AdvanceCall__Inputs {
  _call: AdvanceCall;

  constructor(call: AdvanceCall) {
    this._call = call;
  }
}

export class AdvanceCall__Outputs {
  _call: AdvanceCall;

  constructor(call: AdvanceCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCouponsCall extends ethereum.Call {
  get inputs(): ApproveCouponsCall__Inputs {
    return new ApproveCouponsCall__Inputs(this);
  }

  get outputs(): ApproveCouponsCall__Outputs {
    return new ApproveCouponsCall__Outputs(this);
  }
}

export class ApproveCouponsCall__Inputs {
  _call: ApproveCouponsCall;

  constructor(call: ApproveCouponsCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCouponsCall__Outputs {
  _call: ApproveCouponsCall;

  constructor(call: ApproveCouponsCall) {
    this._call = call;
  }
}

export class BondCall extends ethereum.Call {
  get inputs(): BondCall__Inputs {
    return new BondCall__Inputs(this);
  }

  get outputs(): BondCall__Outputs {
    return new BondCall__Outputs(this);
  }
}

export class BondCall__Inputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BondCall__Outputs {
  _call: BondCall;

  constructor(call: BondCall) {
    this._call = call;
  }
}

export class CommitCall extends ethereum.Call {
  get inputs(): CommitCall__Inputs {
    return new CommitCall__Inputs(this);
  }

  get outputs(): CommitCall__Outputs {
    return new CommitCall__Outputs(this);
  }
}

export class CommitCall__Inputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CommitCall__Outputs {
  _call: CommitCall;

  constructor(call: CommitCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmergencyCommitCall extends ethereum.Call {
  get inputs(): EmergencyCommitCall__Inputs {
    return new EmergencyCommitCall__Inputs(this);
  }

  get outputs(): EmergencyCommitCall__Outputs {
    return new EmergencyCommitCall__Outputs(this);
  }
}

export class EmergencyCommitCall__Inputs {
  _call: EmergencyCommitCall;

  constructor(call: EmergencyCommitCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EmergencyCommitCall__Outputs {
  _call: EmergencyCommitCall;

  constructor(call: EmergencyCommitCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PurchaseCouponsCall extends ethereum.Call {
  get inputs(): PurchaseCouponsCall__Inputs {
    return new PurchaseCouponsCall__Inputs(this);
  }

  get outputs(): PurchaseCouponsCall__Outputs {
    return new PurchaseCouponsCall__Outputs(this);
  }
}

export class PurchaseCouponsCall__Inputs {
  _call: PurchaseCouponsCall;

  constructor(call: PurchaseCouponsCall) {
    this._call = call;
  }

  get dollarAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchaseCouponsCall__Outputs {
  _call: PurchaseCouponsCall;

  constructor(call: PurchaseCouponsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCouponsCall extends ethereum.Call {
  get inputs(): RedeemCouponsCall__Inputs {
    return new RedeemCouponsCall__Inputs(this);
  }

  get outputs(): RedeemCouponsCall__Outputs {
    return new RedeemCouponsCall__Outputs(this);
  }
}

export class RedeemCouponsCall__Inputs {
  _call: RedeemCouponsCall;

  constructor(call: RedeemCouponsCall) {
    this._call = call;
  }

  get couponEpoch(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get couponAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCouponsCall__Outputs {
  _call: RedeemCouponsCall;

  constructor(call: RedeemCouponsCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCouponsCall extends ethereum.Call {
  get inputs(): TransferCouponsCall__Inputs {
    return new TransferCouponsCall__Inputs(this);
  }

  get outputs(): TransferCouponsCall__Outputs {
    return new TransferCouponsCall__Outputs(this);
  }
}

export class TransferCouponsCall__Inputs {
  _call: TransferCouponsCall;

  constructor(call: TransferCouponsCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get epoch(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferCouponsCall__Outputs {
  _call: TransferCouponsCall;

  constructor(call: TransferCouponsCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnbondCall extends ethereum.Call {
  get inputs(): UnbondCall__Inputs {
    return new UnbondCall__Inputs(this);
  }

  get outputs(): UnbondCall__Outputs {
    return new UnbondCall__Outputs(this);
  }
}

export class UnbondCall__Inputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnbondCall__Outputs {
  _call: UnbondCall;

  constructor(call: UnbondCall) {
    this._call = call;
  }
}

export class UnbondUnderlyingCall extends ethereum.Call {
  get inputs(): UnbondUnderlyingCall__Inputs {
    return new UnbondUnderlyingCall__Inputs(this);
  }

  get outputs(): UnbondUnderlyingCall__Outputs {
    return new UnbondUnderlyingCall__Outputs(this);
  }
}

export class UnbondUnderlyingCall__Inputs {
  _call: UnbondUnderlyingCall;

  constructor(call: UnbondUnderlyingCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnbondUnderlyingCall__Outputs {
  _call: UnbondUnderlyingCall;

  constructor(call: UnbondUnderlyingCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get candidate(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get vote(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
